name: Build, Test and Deploy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'funct-story-api'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'src/HexaPokerNet.Azure'
  DOTNET_VERSION: '7.0.x'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x', '7.0.x' ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Install dependencies
        run: dotnet restore
        
      - name: Verify formatting
        run: dotnet format --verify-no-changes
        
      - name: Build
        run: dotnet build
        
      - name: Test with the dotnet CLI
        run: dotnet test
  
  test-acceptance-kafka:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Test Web API with Kafka repository
        run: docker compose -f ./docker-compose.web-api.kafka.test.yml up --abort-on-container-exit --exit-code-from test-web-api
  
  test-acceptance-in-memory:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Test Web API with in-memory repository
        run: docker compose -f ./docker-compose.web-api.in-memory.test.yml up --abort-on-container-exit --exit-code-from test-web-api

  deploy-func:
    runs-on: ubuntu-latest
    needs: 
      - test-acceptance-kafka
      - test-acceptance-in-memory
    environment: dev
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v3

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'Resolve Project Dependencies Using Dotnet'
        shell: bash
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd

      - name: 'Run Azure Functions Action'
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
